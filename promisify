const promisify = (fn) => {
    return (...args) => {
        return new Promise((resolve, reject) => {
            function callBack(err, ...results) {
                if(err) {
                    reject(err)
                }
                if(results) {
                    return results.length === 1 ? resolve(results[0]) : resolve(results)
                }
            }
            args.push(callBack)
            console.log('args after', args)
            fn.apply(this, args)
        })
    }
}

const asyncFunction = (callback) => {
    // Simulate an asynchronous operation (e.g., fetching data from a server)
    setTimeout(function() {
        // Assuming some data is fetched after 2 seconds
        const data = "Async data";
        // Invoke the callback function with the fetched data
        callback(null, data); // Passing null as the error since there is no error in this example
    }, 2000); // Simulating a 2-second delay
}


const promisifiedVersion = promisify(asyncFunction)


promisifiedVersion().then(res => console.log(res))
